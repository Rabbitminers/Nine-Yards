/* tslint:disable */
/* eslint-disable */
/**
 * Nine Yards REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: rabbitminers@zohomail.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * The task's accent colour (hex) This is the
     * colour used in places like the progress bar
     * of the task
     * @type {string}
     * @memberof Task
     */
    accentColour: string;
    /**
     * The time the task was created (ms)
     * @type {Date}
     * @memberof Task
     */
    created: Date;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    creator: string;
    /**
     * The task's due date (if any) (ms)
     * @type {Date}
     * @memberof Task
     */
    due?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    id: string;
    /**
     * The task's description, can also include markdown
     * @type {string}
     * @memberof Task
     */
    information?: string | null;
    /**
     * The task's name (3 -> 30 characters)
     * @type {string}
     * @memberof Task
     */
    name: string;
    /**
     * The task's position in the task group
     * @type {number}
     * @memberof Task
     */
    position: number;
    /**
     * The task's primary colour (hex) This is
     * the colour used in places like the background
     * of the task
     * @type {string}
     * @memberof Task
     */
    primaryColour: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    projectId: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    taskGroupId: string;
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accentColour" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "creator" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "primaryColour" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "taskGroupId" in value;

    return isInstance;
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accentColour': json['accent_colour'],
        'created': (new Date(json['created'])),
        'creator': json['creator'],
        'due': !exists(json, 'due') ? undefined : (json['due'] === null ? null : new Date(json['due'])),
        'id': json['id'],
        'information': !exists(json, 'information') ? undefined : json['information'],
        'name': json['name'],
        'position': json['position'],
        'primaryColour': json['primary_colour'],
        'projectId': json['project_id'],
        'taskGroupId': json['task_group_id'],
    };
}

export function TaskToJSON(value?: Task | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accent_colour': value.accentColour,
        'created': (value.created.toISOString()),
        'creator': value.creator,
        'due': value.due === undefined ? undefined : (value.due === null ? null : value.due.toISOString()),
        'id': value.id,
        'information': value.information,
        'name': value.name,
        'position': value.position,
        'primary_colour': value.primaryColour,
        'project_id': value.projectId,
        'task_group_id': value.taskGroupId,
    };
}

