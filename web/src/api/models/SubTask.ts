/* tslint:disable */
/* eslint-disable */
/**
 * Nine Yards REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: rabbitminers@zohomail.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SubTask
 */
export interface SubTask {
    /**
     * The assigned member's user id (optional).
     * This is kept as a string to be able to be
     * decoded directly.
     * @type {string}
     * @memberof SubTask
     */
    assignee?: string | null;
    /**
     * The sub-task's description (0 -> 90 chars)
     * @type {string}
     * @memberof SubTask
     */
    body: string;
    /**
     * Weather the sub task is completed
     * @type {boolean}
     * @memberof SubTask
     */
    completed: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubTask
     */
    id: string;
    /**
     * The position of the sub-task in the task
     * @type {number}
     * @memberof SubTask
     */
    position: number;
    /**
     * 
     * @type {string}
     * @memberof SubTask
     */
    projectId: string;
    /**
     * 
     * @type {string}
     * @memberof SubTask
     */
    taskId: string;
    /**
     * The weight of the sub-task when calculating
     * completion (optional) by default this will
     * be taken as 100.
     * @type {number}
     * @memberof SubTask
     */
    weight?: number | null;
}

/**
 * Check if a given object implements the SubTask interface.
 */
export function instanceOfSubTask(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "body" in value;
    isInstance = isInstance && "completed" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "position" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "taskId" in value;

    return isInstance;
}

export function SubTaskFromJSON(json: any): SubTask {
    return SubTaskFromJSONTyped(json, false);
}

export function SubTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubTask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assignee': !exists(json, 'assignee') ? undefined : json['assignee'],
        'body': json['body'],
        'completed': json['completed'],
        'id': json['id'],
        'position': json['position'],
        'projectId': json['project_id'],
        'taskId': json['task_id'],
        'weight': !exists(json, 'weight') ? undefined : json['weight'],
    };
}

export function SubTaskToJSON(value?: SubTask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assignee': value.assignee,
        'body': value.body,
        'completed': value.completed,
        'id': value.id,
        'position': value.position,
        'project_id': value.projectId,
        'task_id': value.taskId,
        'weight': value.weight,
    };
}

